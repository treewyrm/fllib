/** Create ID table. */
const hashTable = new Uint32Array([
    0x00000000, 0x00500080, 0x00a00100, 0x00f00180, 0x01400200, 0x01100280, 0x01e00300, 0x01b00380, 0x02800400,
    0x02d00480, 0x02200500, 0x02700580, 0x03c00600, 0x03900680, 0x03600700, 0x03300780, 0x05000800, 0x05500880,
    0x05a00900, 0x05f00980, 0x04400a00, 0x04100a80, 0x04e00b00, 0x04b00b80, 0x07800c00, 0x07d00c80, 0x07200d00,
    0x07700d80, 0x06c00e00, 0x06900e80, 0x06600f00, 0x06300f80, 0x0a001000, 0x0a501080, 0x0aa01100, 0x0af01180,
    0x0b401200, 0x0b101280, 0x0be01300, 0x0bb01380, 0x08801400, 0x08d01480, 0x08201500, 0x08701580, 0x09c01600,
    0x09901680, 0x09601700, 0x09301780, 0x0f001800, 0x0f501880, 0x0fa01900, 0x0ff01980, 0x0e401a00, 0x0e101a80,
    0x0ee01b00, 0x0eb01b80, 0x0d801c00, 0x0dd01c80, 0x0d201d00, 0x0d701d80, 0x0cc01e00, 0x0c901e80, 0x0c601f00,
    0x0c301f80, 0x14002000, 0x14502080, 0x14a02100, 0x14f02180, 0x15402200, 0x15102280, 0x15e02300, 0x15b02380,
    0x16802400, 0x16d02480, 0x16202500, 0x16702580, 0x17c02600, 0x17902680, 0x17602700, 0x17302780, 0x11002800,
    0x11502880, 0x11a02900, 0x11f02980, 0x10402a00, 0x10102a80, 0x10e02b00, 0x10b02b80, 0x13802c00, 0x13d02c80,
    0x13202d00, 0x13702d80, 0x12c02e00, 0x12902e80, 0x12602f00, 0x12302f80, 0x1e003000, 0x1e503080, 0x1ea03100,
    0x1ef03180, 0x1f403200, 0x1f103280, 0x1fe03300, 0x1fb03380, 0x1c803400, 0x1cd03480, 0x1c203500, 0x1c703580,
    0x1dc03600, 0x1d903680, 0x1d603700, 0x1d303780, 0x1b003800, 0x1b503880, 0x1ba03900, 0x1bf03980, 0x1a403a00,
    0x1a103a80, 0x1ae03b00, 0x1ab03b80, 0x19803c00, 0x19d03c80, 0x19203d00, 0x19703d80, 0x18c03e00, 0x18903e80,
    0x18603f00, 0x18303f80, 0x28004000, 0x28504080, 0x28a04100, 0x28f04180, 0x29404200, 0x29104280, 0x29e04300,
    0x29b04380, 0x2a804400, 0x2ad04480, 0x2a204500, 0x2a704580, 0x2bc04600, 0x2b904680, 0x2b604700, 0x2b304780,
    0x2d004800, 0x2d504880, 0x2da04900, 0x2df04980, 0x2c404a00, 0x2c104a80, 0x2ce04b00, 0x2cb04b80, 0x2f804c00,
    0x2fd04c80, 0x2f204d00, 0x2f704d80, 0x2ec04e00, 0x2e904e80, 0x2e604f00, 0x2e304f80, 0x22005000, 0x22505080,
    0x22a05100, 0x22f05180, 0x23405200, 0x23105280, 0x23e05300, 0x23b05380, 0x20805400, 0x20d05480, 0x20205500,
    0x20705580, 0x21c05600, 0x21905680, 0x21605700, 0x21305780, 0x27005800, 0x27505880, 0x27a05900, 0x27f05980,
    0x26405a00, 0x26105a80, 0x26e05b00, 0x26b05b80, 0x25805c00, 0x25d05c80, 0x25205d00, 0x25705d80, 0x24c05e00,
    0x24905e80, 0x24605f00, 0x24305f80, 0x3c006000, 0x3c506080, 0x3ca06100, 0x3cf06180, 0x3d406200, 0x3d106280,
    0x3de06300, 0x3db06380, 0x3e806400, 0x3ed06480, 0x3e206500, 0x3e706580, 0x3fc06600, 0x3f906680, 0x3f606700,
    0x3f306780, 0x39006800, 0x39506880, 0x39a06900, 0x39f06980, 0x38406a00, 0x38106a80, 0x38e06b00, 0x38b06b80,
    0x3b806c00, 0x3bd06c80, 0x3b206d00, 0x3b706d80, 0x3ac06e00, 0x3a906e80, 0x3a606f00, 0x3a306f80, 0x36007000,
    0x36507080, 0x36a07100, 0x36f07180, 0x37407200, 0x37107280, 0x37e07300, 0x37b07380, 0x34807400, 0x34d07480,
    0x34207500, 0x34707580, 0x35c07600, 0x35907680, 0x35607700, 0x35307780, 0x33007800, 0x33507880, 0x33a07900,
    0x33f07980, 0x32407a00, 0x32107a80, 0x32e07b00, 0x32b07b80, 0x31807c00, 0x31d07c80, 0x31207d00, 0x31707d80,
    0x30c07e00, 0x30907e80, 0x30607f00, 0x30307f80,
])

/**
 * A variation of Freelancer crc32 used for nicknames of objects.
 * @param array Array of bytes
 * @param crc Initial hash value
 * @returns Signed 32-bit integer
 */
export default function id32(array: Uint8Array, crc = 0): number {
    for (let i = 0; i < array.length; i++) crc = (crc >>> 8) ^ (hashTable[(crc & 0xff) ^ array[i]!]! >>> 0)
    return (((crc >>> 24) | ((crc >> 8) & 0xff00) | ((crc << 8) & 0xff0000) | (crc << 24)) >>> 2) | 0x80000000 // >>> 0
}
